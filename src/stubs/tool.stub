<?php

namespace {{ namespace }};

use Illuminate\Support\Facades\Validator;
use OPGG\LaravelMcpServer\Enums\ProcessMessageType;
use OPGG\LaravelMcpServer\Exceptions\Enums\JsonRpcErrorCode;
use OPGG\LaravelMcpServer\Exceptions\JsonRpcErrorException;
use OPGG\LaravelMcpServer\Services\ToolService\ToolInterface;

class {{ className }} implements ToolInterface
{
    /**
     * Get the message type for the tool.
     *
     * @return ProcessMessageType
     */
    public function messageType(): ProcessMessageType
    {
        return ProcessMessageType::HTTP;
    }

    /**
     * Get the tool name.
     *
     * @return string
     */
    public function name(): string
    {
        return '{{ toolName }}';
    }

    /**
     * Get the tool description.
     *
     * @return string
     */
    public function description(): string
    {
        return 'Description of {{ className }}';
    }

    /**
     * Get the input schema for the tool.
     *
     * @return array
     */
    public function inputSchema(): array
    {
        return [
            'type' => 'object',
            'properties' => [
                'param1' => [
                    'type' => 'string',
                    'description' => 'First parameter description',
                ],
                // Add more parameters as needed
            ],
            'required' => ['param1'],
        ];
    }

    /**
     * Get the tool annotations.
     *
     * @return array
     */
    public function annotations(): array
    {
        return [];
    }

    /**
     * Execute the tool.
     *
     * @param array $arguments Tool arguments
     * @return array
     */
    public function execute(array $arguments): array
    {
        $validator = Validator::make($arguments, [
            'param1' => ['required', 'string'],
            // Add more validation rules as needed
        ]);

        if ($validator->fails()) {
            throw new JsonRpcErrorException(
                message: $validator->errors()->toJson(),
                code: JsonRpcErrorCode::INVALID_REQUEST
            );
        }

        $param1 = $arguments['param1'] ?? 'default';

        // Implement your tool logic here
        return [
            'param1' => $param1,
            'message' => "Tool executed with parameter: {$param1}",
        ];
    }
}
